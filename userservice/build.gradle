plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'thi.cnd'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '20'
}

springBoot {
    mainClass = 'thi.cnd.userservice.Application'
}

jar {
    manifest {
        attributes('Main-Class': 'thi.cnd.userservice.Application')
    }
}

dependencies {
    implementation project(':application')
    implementation project(':core')
    implementation project(':primary')
    implementation project(':secondary')
}

repositories {
    mavenCentral()
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        sourceCompatibility = '20'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
        implementation 'org.mapstruct:mapstruct:1.5.5.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.zalando:jackson-datatype-money:1.3.0'
    }


    test {
        useJUnitPlatform()
    }

    bootJar {
        enabled = false
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += "--enable-preview"
    }

    tasks.withType(Test).configureEach {
        jvmArgs += "--enable-preview"
    }

    tasks.withType(JavaExec).tap {
        configureEach {
            jvmArgs += '--enable-preview'
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
}

tasks.withType(JavaExec).tap {
    configureEach {
        jvmArgs += '--enable-preview'
    }
}

