openapi: 3.0.0
info:
  title: User-Service
  description: API.
  version: 0.0.1
paths:
  /users/register:
    put:
      summary: Register a new user.
      operationId: registerNewUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '200':
          description: Registration was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{user-id}:
    get:
      description: Get user of provided user id.
      operationId: getUser
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found for id.
    delete:
      description: Deletes the user.
      operationId: deleteUser
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: User was deleted.
        '404':
          description: User not found for id.
  #/users/delete-by-user-profile-email:
  #  delete:
  #    description: Deletes the user by email. This endpoint should only be called by other services.
  #    operationId: deleteUserByUserProfileEmail
  #    tags:
  #      - User
  #    requestBody:
  #      required: true
  #      content:
  #        application/json:
  #          schema:
  #            $ref: '#/components/schemas/DeleteUserByUserProfileEmailRequest'
  #    responses:
  #      '204':
  #        description: User was deleted.
  #      '404':
  #        description: User not found for id.
  /users/{user-id}/public-profile:
    get:
      description: Get user public profile of provided user id.
      operationId: getPublicUserProfile
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfile'
        '404':
          description: User not found for id.
  /users/{user-id}/update-user-profile-email:
    post:
      description: Update the user profile email associated to this user.
      operationId: updateUserProfileEmail
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileEmailRequest'
      responses:
        '200':
          description: User data was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found for id.
  /users/{user-id}/update-user-data:
    post:
      description: Update the user data associated with this user.
      operationId: updateUserData
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDataRequest'
      responses:
        '200':
          description: User data was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found for id.
  /users/{user-id}/subscribe:
    post:
      summary: Makes the user a subscriber or extends their subscription.
      operationId: subscribe
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendUserSubscriptionRequest'
      responses:
        '200':
          description: Subscription was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscription'
  /users/{user-id}/accept-company-invitation:
    post:
      summary: Accepts the invitation to be a member of a company.
      operationId: acceptInvitation
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptCompanyInvitationRequest'
      responses:
        '204':
          description: Invitation was accepted.
  /companies:
    get:
      description: Get company for provided id.
      operationId: searchCompanies
      tags:
        - Company
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: tags
          schema:
            type: array
            uniqueItems: true
            items:
              type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
      responses:
        '200':
          description: Companies for filters were found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPublicCompanyProfileResponse'
        '404':
          description: Company not found for id.
  /companies/register:
    put:
      summary: Creates a new company.
      operationId: createNewCompany
      tags:
        - Company
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyRegistrationRequest'
      responses:
        '200':
          description: Registration was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
  /companies/{company-id}:
    get:
      description: Get company for provided id.
      operationId: getCompany
      tags:
        - Company
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      responses:
        '200':
          description: Company was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Company not found for id.
    delete:
      description: Deletes the company.
      operationId: deleteCompany
      tags:
        - Company
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      responses:
        '204':
          description: The company was deleted.
        '404':
          description: Company not found for id.
  /companies/{company-id}/public-profile:
    get:
      description: Get company for provided id.
      operationId: getPublicCompanyProfile
      tags:
        - Company
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      responses:
        '200':
          description: Company was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicCompanyProfile'
        '404':
          description: Company not found for id.
  /companies/{company-id}/invite-user:
    post:
      description: Invites an user to join the company.
      operationId: inviteUserToCompany
      tags:
        - Company
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyInviteUserRequest'
      responses:
        '201':
          description: Invitation was sent.
        '404':
          description: Company not found for id.
  /companies/{company-id}/update-company-data:
    post:
      description: Overrides the current company data with the provided data.
      operationId: updateCompanyData
      tags:
        - Company
      parameters:
        - $ref: '#/components/parameters/CompanyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompanyDataRequest'
      responses:
        '200':
          description: Registration was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Company not found for id.
  /token-introspection:
    get:
      summary: Get the user data from the provided access token.
      operationId: getRequestUserData
      tags:
        - Auth
      responses:
        '200':
          description: Token is valid and user data could be retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  parameters:
    UserId:
      in: path
      name: user-id
      schema:
        $ref: '#/components/schemas/UUID'
      required: true
    CompanyId:
      in: path
      name: company-id
      schema:
        $ref: '#/components/schemas/UUID'
      required: true
    Page:
      in: query
      name: page
      schema:
        type: integer
    Size:
      in: query
      name: size
      schema:
        type: integer
  schemas:
    PublicUserProfile:
      type: object
      required:
        - id
        - first_name
        - last_name
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        first_name:
          type: string
        last_name:
          type: string
    User:
      type: object
      required:
        - id
        - profile
        - associations
        - settings
        - subscription
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        profile:
          $ref: '#/components/schemas/UserProfile'
        associations:
          $ref: '#/components/schemas/UserCompanyAssociation'
        settings:
          $ref: '#/components/schemas/UserSettings'
        subscription:
          $ref: '#/components/schemas/UserSubscription'
    UserProfile:
      type: object
      required:
        - user_profile_email
        - first_name
        - last_name
      properties:
        user_profile_email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    UserCompanyAssociation:
      type: object
      required:
        - member_of
        - invited_to
      properties:
        member_of:
          type: array
          items:
            $ref: '#/components/schemas/UUID'
        invited_to:
          type: array
          items:
            $ref: '#/components/schemas/UUID'
    UserSettings:
      type: object
      required:
        - nightModeActive
      properties:
        nightModeActive:
          type: boolean
    UserSubscription:
      type: object
      required:
        - subscribed
      properties:
        subscribed:
          type: boolean
        subscribedUntil:
          type: string
          format: date-time
    UserRegistrationRequest:
      type: object
      required:
        - user_profile_email
        - first_name
        - last_name
      properties:
        user_profile_email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
    DeleteUserByUserProfileEmailRequest:
      type: object
      required:
        - user_profile_email
      properties:
        user_profile_email:
          type: string
    ExtendUserSubscriptionRequest:
      type: object
      required:
        - extend_by_in_days
      properties:
        extend_by_in_days:
          type: integer
    AcceptCompanyInvitationRequest:
      type: object
      required:
        - company_id
      properties:
        company_id:
          $ref: '#/components/schemas/UUID'
    UpdateUserProfileEmailRequest:
      type: object
      required:
        - user_profile_email
      properties:
        user_profile_email:
          type: string
    UpdateUserDataRequest:
      type: object
      properties:
        user_profile:
          $ref: '#/components/schemas/UpdateUserProfileRequest'
        settings:
          $ref: '#/components/schemas/UpdateUserSettingsRequest'
    UpdateUserProfileRequest:
      type: object
      required:
        - first_name
        - last_name
      properties:
        first_name:
          type: string
        last_name:
          type: string
    UpdateUserSettingsRequest:
      type: object
      required:
        - night_mode_active
      properties:
        night_mode_active:
          type: boolean
    UpdateCompanyDataRequest:
      type: object
      properties:
        details:
          $ref: '#/components/schemas/UpdateCompanyDetailsRequest'
        settings:
          $ref: '#/components/schemas/UpdateCompanyLinksRequest'
    UpdateCompanyDetailsRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          uniqueItems: true
          items:
            type: string
        location:
          type: string
    UpdateCompanyLinksRequest:
      type: object
      properties:
        homepage:
          type: string
        social_media:
          type: array
          uniqueItems: true
          items:
            type: string
    PaginatedPublicCompanyProfileResponse:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/PublicCompanyProfile'
    PublicCompanyProfile:
      type: object
      required:
        - id
        - details
        - links
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        details:
          $ref: '#/components/schemas/CompanyDetails'
        links:
          $ref: '#/components/schemas/CompanyLinks'
    Company:
      type: object
      required:
        - id
        - owner
        - members
        - details
        - links
        - partner_program
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        owner:
          $ref: '#/components/schemas/UUID'
        members:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/UUID'
        details:
          $ref: '#/components/schemas/CompanyDetails'
        links:
          $ref: '#/components/schemas/CompanyLinks'
        partner_program:
          $ref: '#/components/schemas/CompanyPartnerProgram'
    CompanyDetails:
      type: object
      required:
        - name
        - description
        - tags
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          uniqueItems: true
          items:
            type: string
        location:
          type: string
    CompanyLinks:
      type: object
      properties:
        website_url:
          type: string
        social_media:
          type: array
          uniqueItems: true
          items:
            type: string
    CompanyPartnerProgram:
      type: object
      required:
        - partnered
      properties:
        partnered:
          type: boolean
        partner_until:
          type: string
          format: date-time
    CompanyRegistrationRequest:
      type: object
      required:
        - owner
        - details
      properties:
        owner:
          $ref: '#/components/schemas/UUID'
        details:
          $ref: '#/components/schemas/CompanyDetails'
        links:
          $ref: '#/components/schemas/CompanyLinks'
    CompanyInviteUserRequest:
      type: object
      properties:
        user_profile_email:
          type: string
    Pagination:
      type: object
      required:
        - total_pages
        - current_page
        - total_item_count
        - item_count
      properties:
        total_pages:
          type: integer
        current_page:
          type: integer
        total_item_count:
          type: integer
          format: int64
        item_count:
          type: integer
    UUID:
      type: string
      format: UUID
