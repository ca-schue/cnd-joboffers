/*
 * User-Service
 * API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptCompanyInvitationRequest;
import org.openapitools.client.model.ExtendUserSubscriptionRequest;
import org.openapitools.client.model.PublicUserProfile;
import java.util.UUID;
import org.openapitools.client.model.UpdateUserDataRequest;
import org.openapitools.client.model.UpdateUserProfileEmailRequest;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserRegistrationRequest;
import org.openapitools.client.model.UserSubscription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Accepts the invitation to be a member of a company.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptInvitationTest() throws ApiException {
        UUID userId = null;
        AcceptCompanyInvitationRequest acceptCompanyInvitationRequest = null;
        api.acceptInvitation(userId, acceptCompanyInvitationRequest);
        // TODO: test validations
    }

    /**
     * Deletes the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        UUID userId = null;
        api.deleteUser(userId);
        // TODO: test validations
    }

    /**
     * Get user public profile of provided user id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicUserProfileTest() throws ApiException {
        UUID userId = null;
        PublicUserProfile response = api.getPublicUserProfile(userId);
        // TODO: test validations
    }

    /**
     * Get user of provided user id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        UUID userId = null;
        User response = api.getUser(userId);
        // TODO: test validations
    }

    /**
     * Register a new user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerNewUserTest() throws ApiException {
        UserRegistrationRequest userRegistrationRequest = null;
        User response = api.registerNewUser(userRegistrationRequest);
        // TODO: test validations
    }

    /**
     * Makes the user a subscriber or extends their subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeTest() throws ApiException {
        UUID userId = null;
        ExtendUserSubscriptionRequest extendUserSubscriptionRequest = null;
        UserSubscription response = api.subscribe(userId, extendUserSubscriptionRequest);
        // TODO: test validations
    }

    /**
     * Update the user data associated with this user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserDataTest() throws ApiException {
        UUID userId = null;
        UpdateUserDataRequest updateUserDataRequest = null;
        User response = api.updateUserData(userId, updateUserDataRequest);
        // TODO: test validations
    }

    /**
     * Update the user profile email associated to this user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserProfileEmailTest() throws ApiException {
        UUID userId = null;
        UpdateUserProfileEmailRequest updateUserProfileEmailRequest = null;
        User response = api.updateUserProfileEmail(userId, updateUserProfileEmailRequest);
        // TODO: test validations
    }

}
