/*
 * User-Service
 * API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Company;
import org.openapitools.client.model.CompanyInviteUserRequest;
import org.openapitools.client.model.CompanyRegistrationRequest;
import org.openapitools.client.model.PaginatedPublicCompanyProfileResponse;
import org.openapitools.client.model.PublicCompanyProfile;
import java.util.Set;
import java.util.UUID;
import org.openapitools.client.model.UpdateCompanyDataRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompanyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompanyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createNewCompany
     * @param companyRegistrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewCompanyCall(CompanyRegistrationRequest companyRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyRegistrationRequest;

        // create path and map variables
        String localVarPath = "/companies/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCompanyValidateBeforeCall(CompanyRegistrationRequest companyRegistrationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyRegistrationRequest' is set
        if (companyRegistrationRequest == null) {
            throw new ApiException("Missing the required parameter 'companyRegistrationRequest' when calling createNewCompany(Async)");
        }
        

        okhttp3.Call localVarCall = createNewCompanyCall(companyRegistrationRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a new company.
     * 
     * @param companyRegistrationRequest  (required)
     * @return Company
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Company createNewCompany(CompanyRegistrationRequest companyRegistrationRequest) throws ApiException {
        ApiResponse<Company> localVarResp = createNewCompanyWithHttpInfo(companyRegistrationRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a new company.
     * 
     * @param companyRegistrationRequest  (required)
     * @return ApiResponse&lt;Company&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Company> createNewCompanyWithHttpInfo(CompanyRegistrationRequest companyRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewCompanyValidateBeforeCall(companyRegistrationRequest, null);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new company. (asynchronously)
     * 
     * @param companyRegistrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewCompanyAsync(CompanyRegistrationRequest companyRegistrationRequest, final ApiCallback<Company> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCompanyValidateBeforeCall(companyRegistrationRequest, _callback);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCompany
     * @param companyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The company was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCompanyCall(UUID companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{company-id}"
            .replaceAll("\\{" + "company-id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompanyValidateBeforeCall(UUID companyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteCompany(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCompanyCall(companyId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes the company.
     * @param companyId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The company was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCompany(UUID companyId) throws ApiException {
        deleteCompanyWithHttpInfo(companyId);
    }

    /**
     * 
     * Deletes the company.
     * @param companyId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The company was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCompanyWithHttpInfo(UUID companyId) throws ApiException {
        okhttp3.Call localVarCall = deleteCompanyValidateBeforeCall(companyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the company.
     * @param companyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The company was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCompanyAsync(UUID companyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompanyValidateBeforeCall(companyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompany
     * @param companyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompanyCall(UUID companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{company-id}"
            .replaceAll("\\{" + "company-id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyValidateBeforeCall(UUID companyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompany(Async)");
        }
        

        okhttp3.Call localVarCall = getCompanyCall(companyId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get company for provided id.
     * @param companyId  (required)
     * @return Company
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public Company getCompany(UUID companyId) throws ApiException {
        ApiResponse<Company> localVarResp = getCompanyWithHttpInfo(companyId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get company for provided id.
     * @param companyId  (required)
     * @return ApiResponse&lt;Company&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Company> getCompanyWithHttpInfo(UUID companyId) throws ApiException {
        okhttp3.Call localVarCall = getCompanyValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get company for provided id.
     * @param companyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompanyAsync(UUID companyId, final ApiCallback<Company> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicCompanyProfile
     * @param companyId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicCompanyProfileCall(UUID companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{company-id}/public-profile"
            .replaceAll("\\{" + "company-id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicCompanyProfileValidateBeforeCall(UUID companyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getPublicCompanyProfile(Async)");
        }
        

        okhttp3.Call localVarCall = getPublicCompanyProfileCall(companyId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get company for provided id.
     * @param companyId  (required)
     * @return PublicCompanyProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public PublicCompanyProfile getPublicCompanyProfile(UUID companyId) throws ApiException {
        ApiResponse<PublicCompanyProfile> localVarResp = getPublicCompanyProfileWithHttpInfo(companyId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get company for provided id.
     * @param companyId  (required)
     * @return ApiResponse&lt;PublicCompanyProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicCompanyProfile> getPublicCompanyProfileWithHttpInfo(UUID companyId) throws ApiException {
        okhttp3.Call localVarCall = getPublicCompanyProfileValidateBeforeCall(companyId, null);
        Type localVarReturnType = new TypeToken<PublicCompanyProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get company for provided id.
     * @param companyId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicCompanyProfileAsync(UUID companyId, final ApiCallback<PublicCompanyProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicCompanyProfileValidateBeforeCall(companyId, _callback);
        Type localVarReturnType = new TypeToken<PublicCompanyProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inviteUserToCompany
     * @param companyId  (required)
     * @param companyInviteUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invitation was sent. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUserToCompanyCall(UUID companyId, CompanyInviteUserRequest companyInviteUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companyInviteUserRequest;

        // create path and map variables
        String localVarPath = "/companies/{company-id}/invite-user"
            .replaceAll("\\{" + "company-id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserToCompanyValidateBeforeCall(UUID companyId, CompanyInviteUserRequest companyInviteUserRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling inviteUserToCompany(Async)");
        }
        
        // verify the required parameter 'companyInviteUserRequest' is set
        if (companyInviteUserRequest == null) {
            throw new ApiException("Missing the required parameter 'companyInviteUserRequest' when calling inviteUserToCompany(Async)");
        }
        

        okhttp3.Call localVarCall = inviteUserToCompanyCall(companyId, companyInviteUserRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Invites an user to join the company.
     * @param companyId  (required)
     * @param companyInviteUserRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invitation was sent. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public void inviteUserToCompany(UUID companyId, CompanyInviteUserRequest companyInviteUserRequest) throws ApiException {
        inviteUserToCompanyWithHttpInfo(companyId, companyInviteUserRequest);
    }

    /**
     * 
     * Invites an user to join the company.
     * @param companyId  (required)
     * @param companyInviteUserRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invitation was sent. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> inviteUserToCompanyWithHttpInfo(UUID companyId, CompanyInviteUserRequest companyInviteUserRequest) throws ApiException {
        okhttp3.Call localVarCall = inviteUserToCompanyValidateBeforeCall(companyId, companyInviteUserRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Invites an user to join the company.
     * @param companyId  (required)
     * @param companyInviteUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Invitation was sent. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUserToCompanyAsync(UUID companyId, CompanyInviteUserRequest companyInviteUserRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserToCompanyValidateBeforeCall(companyId, companyInviteUserRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCompanies
     * @param name  (optional)
     * @param tags  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Companies for filters were found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCompaniesCall(String name, Set<String> tags, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCompaniesValidateBeforeCall(String name, Set<String> tags, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchCompaniesCall(name, tags, page, size, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get company for provided id.
     * @param name  (optional)
     * @param tags  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @return PaginatedPublicCompanyProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Companies for filters were found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPublicCompanyProfileResponse searchCompanies(String name, Set<String> tags, Integer page, Integer size) throws ApiException {
        ApiResponse<PaginatedPublicCompanyProfileResponse> localVarResp = searchCompaniesWithHttpInfo(name, tags, page, size);
        return localVarResp.getData();
    }

    /**
     * 
     * Get company for provided id.
     * @param name  (optional)
     * @param tags  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @return ApiResponse&lt;PaginatedPublicCompanyProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Companies for filters were found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPublicCompanyProfileResponse> searchCompaniesWithHttpInfo(String name, Set<String> tags, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = searchCompaniesValidateBeforeCall(name, tags, page, size, null);
        Type localVarReturnType = new TypeToken<PaginatedPublicCompanyProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get company for provided id.
     * @param name  (optional)
     * @param tags  (optional)
     * @param page  (optional)
     * @param size  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Companies for filters were found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCompaniesAsync(String name, Set<String> tags, Integer page, Integer size, final ApiCallback<PaginatedPublicCompanyProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCompaniesValidateBeforeCall(name, tags, page, size, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPublicCompanyProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCompanyData
     * @param companyId  (required)
     * @param updateCompanyDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanyDataCall(UUID companyId, UpdateCompanyDataRequest updateCompanyDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCompanyDataRequest;

        // create path and map variables
        String localVarPath = "/companies/{company-id}/update-company-data"
            .replaceAll("\\{" + "company-id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanyDataValidateBeforeCall(UUID companyId, UpdateCompanyDataRequest updateCompanyDataRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling updateCompanyData(Async)");
        }
        
        // verify the required parameter 'updateCompanyDataRequest' is set
        if (updateCompanyDataRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCompanyDataRequest' when calling updateCompanyData(Async)");
        }
        

        okhttp3.Call localVarCall = updateCompanyDataCall(companyId, updateCompanyDataRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Overrides the current company data with the provided data.
     * @param companyId  (required)
     * @param updateCompanyDataRequest  (required)
     * @return Company
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public Company updateCompanyData(UUID companyId, UpdateCompanyDataRequest updateCompanyDataRequest) throws ApiException {
        ApiResponse<Company> localVarResp = updateCompanyDataWithHttpInfo(companyId, updateCompanyDataRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Overrides the current company data with the provided data.
     * @param companyId  (required)
     * @param updateCompanyDataRequest  (required)
     * @return ApiResponse&lt;Company&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Company> updateCompanyDataWithHttpInfo(UUID companyId, UpdateCompanyDataRequest updateCompanyDataRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCompanyDataValidateBeforeCall(companyId, updateCompanyDataRequest, null);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Overrides the current company data with the provided data.
     * @param companyId  (required)
     * @param updateCompanyDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Company not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanyDataAsync(UUID companyId, UpdateCompanyDataRequest updateCompanyDataRequest, final ApiCallback<Company> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanyDataValidateBeforeCall(companyId, updateCompanyDataRequest, _callback);
        Type localVarReturnType = new TypeToken<Company>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
