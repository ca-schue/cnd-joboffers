/*
 * User-Service
 * API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcceptCompanyInvitationRequest;
import org.openapitools.client.model.ExtendUserSubscriptionRequest;
import org.openapitools.client.model.PublicUserProfile;
import java.util.UUID;
import org.openapitools.client.model.UpdateUserDataRequest;
import org.openapitools.client.model.UpdateUserProfileEmailRequest;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserRegistrationRequest;
import org.openapitools.client.model.UserSubscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptInvitation
     * @param userId  (required)
     * @param acceptCompanyInvitationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation was accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptInvitationCall(UUID userId, AcceptCompanyInvitationRequest acceptCompanyInvitationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acceptCompanyInvitationRequest;

        // create path and map variables
        String localVarPath = "/users/{user-id}/accept-company-invitation"
            .replaceAll("\\{" + "user-id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptInvitationValidateBeforeCall(UUID userId, AcceptCompanyInvitationRequest acceptCompanyInvitationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling acceptInvitation(Async)");
        }
        
        // verify the required parameter 'acceptCompanyInvitationRequest' is set
        if (acceptCompanyInvitationRequest == null) {
            throw new ApiException("Missing the required parameter 'acceptCompanyInvitationRequest' when calling acceptInvitation(Async)");
        }
        

        okhttp3.Call localVarCall = acceptInvitationCall(userId, acceptCompanyInvitationRequest, _callback);
        return localVarCall;

    }

    /**
     * Accepts the invitation to be a member of a company.
     * 
     * @param userId  (required)
     * @param acceptCompanyInvitationRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation was accepted. </td><td>  -  </td></tr>
     </table>
     */
    public void acceptInvitation(UUID userId, AcceptCompanyInvitationRequest acceptCompanyInvitationRequest) throws ApiException {
        acceptInvitationWithHttpInfo(userId, acceptCompanyInvitationRequest);
    }

    /**
     * Accepts the invitation to be a member of a company.
     * 
     * @param userId  (required)
     * @param acceptCompanyInvitationRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation was accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> acceptInvitationWithHttpInfo(UUID userId, AcceptCompanyInvitationRequest acceptCompanyInvitationRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptInvitationValidateBeforeCall(userId, acceptCompanyInvitationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accepts the invitation to be a member of a company. (asynchronously)
     * 
     * @param userId  (required)
     * @param acceptCompanyInvitationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Invitation was accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptInvitationAsync(UUID userId, AcceptCompanyInvitationRequest acceptCompanyInvitationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptInvitationValidateBeforeCall(userId, acceptCompanyInvitationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}"
            .replaceAll("\\{" + "user-id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes the user.
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(UUID userId) throws ApiException {
        deleteUserWithHttpInfo(userId);
    }

    /**
     * 
     * Deletes the user.
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the user.
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(UUID userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPublicUserProfile
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicUserProfileCall(UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}/public-profile"
            .replaceAll("\\{" + "user-id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicUserProfileValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getPublicUserProfile(Async)");
        }
        

        okhttp3.Call localVarCall = getPublicUserProfileCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get user public profile of provided user id.
     * @param userId  (required)
     * @return PublicUserProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public PublicUserProfile getPublicUserProfile(UUID userId) throws ApiException {
        ApiResponse<PublicUserProfile> localVarResp = getPublicUserProfileWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get user public profile of provided user id.
     * @param userId  (required)
     * @return ApiResponse&lt;PublicUserProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublicUserProfile> getPublicUserProfileWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getPublicUserProfileValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<PublicUserProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get user public profile of provided user id.
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPublicUserProfileAsync(UUID userId, final ApiCallback<PublicUserProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicUserProfileValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<PublicUserProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(UUID userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user-id}"
            .replaceAll("\\{" + "user-id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(UUID userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }
        

        okhttp3.Call localVarCall = getUserCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get user of provided user id.
     * @param userId  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(UUID userId) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get user of provided user id.
     * @param userId  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(UUID userId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get user of provided user id.
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User was found. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(UUID userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerNewUser
     * @param userRegistrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerNewUserCall(UserRegistrationRequest userRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userRegistrationRequest;

        // create path and map variables
        String localVarPath = "/users/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerNewUserValidateBeforeCall(UserRegistrationRequest userRegistrationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userRegistrationRequest' is set
        if (userRegistrationRequest == null) {
            throw new ApiException("Missing the required parameter 'userRegistrationRequest' when calling registerNewUser(Async)");
        }
        

        okhttp3.Call localVarCall = registerNewUserCall(userRegistrationRequest, _callback);
        return localVarCall;

    }

    /**
     * Register a new user.
     * 
     * @param userRegistrationRequest  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
     </table>
     */
    public User registerNewUser(UserRegistrationRequest userRegistrationRequest) throws ApiException {
        ApiResponse<User> localVarResp = registerNewUserWithHttpInfo(userRegistrationRequest);
        return localVarResp.getData();
    }

    /**
     * Register a new user.
     * 
     * @param userRegistrationRequest  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> registerNewUserWithHttpInfo(UserRegistrationRequest userRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = registerNewUserValidateBeforeCall(userRegistrationRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register a new user. (asynchronously)
     * 
     * @param userRegistrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Registration was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerNewUserAsync(UserRegistrationRequest userRegistrationRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerNewUserValidateBeforeCall(userRegistrationRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscribe
     * @param userId  (required)
     * @param extendUserSubscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeCall(UUID userId, ExtendUserSubscriptionRequest extendUserSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extendUserSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/users/{user-id}/subscribe"
            .replaceAll("\\{" + "user-id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeValidateBeforeCall(UUID userId, ExtendUserSubscriptionRequest extendUserSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling subscribe(Async)");
        }
        
        // verify the required parameter 'extendUserSubscriptionRequest' is set
        if (extendUserSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'extendUserSubscriptionRequest' when calling subscribe(Async)");
        }
        

        okhttp3.Call localVarCall = subscribeCall(userId, extendUserSubscriptionRequest, _callback);
        return localVarCall;

    }

    /**
     * Makes the user a subscriber or extends their subscription.
     * 
     * @param userId  (required)
     * @param extendUserSubscriptionRequest  (required)
     * @return UserSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription was successful. </td><td>  -  </td></tr>
     </table>
     */
    public UserSubscription subscribe(UUID userId, ExtendUserSubscriptionRequest extendUserSubscriptionRequest) throws ApiException {
        ApiResponse<UserSubscription> localVarResp = subscribeWithHttpInfo(userId, extendUserSubscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Makes the user a subscriber or extends their subscription.
     * 
     * @param userId  (required)
     * @param extendUserSubscriptionRequest  (required)
     * @return ApiResponse&lt;UserSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserSubscription> subscribeWithHttpInfo(UUID userId, ExtendUserSubscriptionRequest extendUserSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = subscribeValidateBeforeCall(userId, extendUserSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<UserSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Makes the user a subscriber or extends their subscription. (asynchronously)
     * 
     * @param userId  (required)
     * @param extendUserSubscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscribeAsync(UUID userId, ExtendUserSubscriptionRequest extendUserSubscriptionRequest, final ApiCallback<UserSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscribeValidateBeforeCall(userId, extendUserSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<UserSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserData
     * @param userId  (required)
     * @param updateUserDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User data was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserDataCall(UUID userId, UpdateUserDataRequest updateUserDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserDataRequest;

        // create path and map variables
        String localVarPath = "/users/{user-id}/update-user-data"
            .replaceAll("\\{" + "user-id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserDataValidateBeforeCall(UUID userId, UpdateUserDataRequest updateUserDataRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserData(Async)");
        }
        
        // verify the required parameter 'updateUserDataRequest' is set
        if (updateUserDataRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserDataRequest' when calling updateUserData(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserDataCall(userId, updateUserDataRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the user data associated with this user.
     * @param userId  (required)
     * @param updateUserDataRequest  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User data was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public User updateUserData(UUID userId, UpdateUserDataRequest updateUserDataRequest) throws ApiException {
        ApiResponse<User> localVarResp = updateUserDataWithHttpInfo(userId, updateUserDataRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the user data associated with this user.
     * @param userId  (required)
     * @param updateUserDataRequest  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User data was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserDataWithHttpInfo(UUID userId, UpdateUserDataRequest updateUserDataRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserDataValidateBeforeCall(userId, updateUserDataRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the user data associated with this user.
     * @param userId  (required)
     * @param updateUserDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User data was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserDataAsync(UUID userId, UpdateUserDataRequest updateUserDataRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserDataValidateBeforeCall(userId, updateUserDataRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserProfileEmail
     * @param userId  (required)
     * @param updateUserProfileEmailRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User data was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserProfileEmailCall(UUID userId, UpdateUserProfileEmailRequest updateUserProfileEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserProfileEmailRequest;

        // create path and map variables
        String localVarPath = "/users/{user-id}/update-user-profile-email"
            .replaceAll("\\{" + "user-id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserProfileEmailValidateBeforeCall(UUID userId, UpdateUserProfileEmailRequest updateUserProfileEmailRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserProfileEmail(Async)");
        }
        
        // verify the required parameter 'updateUserProfileEmailRequest' is set
        if (updateUserProfileEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserProfileEmailRequest' when calling updateUserProfileEmail(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserProfileEmailCall(userId, updateUserProfileEmailRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the user profile email associated to this user.
     * @param userId  (required)
     * @param updateUserProfileEmailRequest  (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User data was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public User updateUserProfileEmail(UUID userId, UpdateUserProfileEmailRequest updateUserProfileEmailRequest) throws ApiException {
        ApiResponse<User> localVarResp = updateUserProfileEmailWithHttpInfo(userId, updateUserProfileEmailRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the user profile email associated to this user.
     * @param userId  (required)
     * @param updateUserProfileEmailRequest  (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User data was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserProfileEmailWithHttpInfo(UUID userId, UpdateUserProfileEmailRequest updateUserProfileEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserProfileEmailValidateBeforeCall(userId, updateUserProfileEmailRequest, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the user profile email associated to this user.
     * @param userId  (required)
     * @param updateUserProfileEmailRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User data was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserProfileEmailAsync(UUID userId, UpdateUserProfileEmailRequest updateUserProfileEmailRequest, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserProfileEmailValidateBeforeCall(userId, updateUserProfileEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
