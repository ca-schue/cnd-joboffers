import org.gradle.api.tasks.testing.Test

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'thi.cnd'
version = '0.0.1-SNAPSHOT'

springBoot {
	mainClass = 'thi.cnd.authservice.Application'
}

jar {
	manifest {
		attributes('Main-Class': 'thi.cnd.authservice.Application')
	}
}

test {
	useJUnitPlatform() {
		exclude "**/IntegrationTests.class"
	}
}

tasks.register('integrationTest', Test) {
	useJUnitPlatform()
}

tasks.register('testReport', TestReport) {
	destinationDir = file("$buildDir/reports/allTests")
	testResults.from += "$buildDir/test-results/integrationTest/binary"
	testResults.from += subprojects*.test
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'

	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.7.1'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.7.0'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'com.nimbusds:nimbus-jose-jwt:9.31'
	testImplementation 'org.springframework.security:spring-security-oauth2-jose:6.1.4'
	testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	testImplementation 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
}

dependencies {
	implementation project(':application')
	implementation project(':domain')
	implementation project(':adapters:in')
	implementation project(':adapters:out')

}

repositories {
	mavenCentral()
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	java {
		sourceCompatibility = '21'
		targetCompatibility = '21'
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
		implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server' // contains OAuth2 Resource server + client
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'

		implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
		implementation 'org.mapstruct:mapstruct:1.5.5.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

		implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
		runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

		implementation 'org.passay:passay:1.6.3'

		// https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
		implementation 'com.google.code.findbugs:jsr305:3.0.2'

		testImplementation 'org.junit.jupiter:junit-jupiter-api'
		testImplementation 'org.junit.jupiter:junit-jupiter-engine'
		testImplementation 'org.mockito:mockito-junit-jupiter'

		implementation 'org.springframework.kafka:spring-kafka'

		implementation 'javax.annotation:javax.annotation-api:1.3.2'
		implementation 'org.springframework:spring-webflux:6.0.11'
		implementation 'org.zalando:jackson-datatype-money:1.3.0'

		implementation 'org.springframework.boot:spring-boot-starter-actuator'
	}

	test {
		useJUnitPlatform()
	}

	tasks.withType(Test).configureEach {
		maxParallelForks = 1
	}

	bootJar {
		enabled = false
	}
}

test.finalizedBy testReport
integrationTest.finalizedBy testReport

