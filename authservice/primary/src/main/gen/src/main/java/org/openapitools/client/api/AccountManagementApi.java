/*
 * Auth-Service
 * The api for the auth-service. This service creates users and clients to authenticate against the internal applications of this project. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import org.openapitools.client.model.InternalAccountRegistrationRequest;
import org.openapitools.client.model.ThrowableProblem;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAccount
     * @param accountId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCall(UUID accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountAccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(UUID accountId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccount(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccountCall(accountId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes the account. {accountId} must match account id in access token
     * @param accountId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccount(UUID accountId) throws ApiException {
        deleteAccountWithHttpInfo(accountId);
    }

    /**
     * 
     * Deletes the account. {accountId} must match account id in access token
     * @param accountId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountWithHttpInfo(UUID accountId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the account. {accountId} must match account id in access token
     * @param accountId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> User was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found for id. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAsync(UUID accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerInternalAccount
     * @param internalAccountRegistrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Interal account registration was successful. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Account with the email already exists. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returned if any error occurred during the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerInternalAccountCall(InternalAccountRegistrationRequest internalAccountRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = internalAccountRegistrationRequest;

        // create path and map variables
        String localVarPath = "/accounts/registerInternalAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerInternalAccountValidateBeforeCall(InternalAccountRegistrationRequest internalAccountRegistrationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'internalAccountRegistrationRequest' is set
        if (internalAccountRegistrationRequest == null) {
            throw new ApiException("Missing the required parameter 'internalAccountRegistrationRequest' when calling registerInternalAccount(Async)");
        }
        

        okhttp3.Call localVarCall = registerInternalAccountCall(internalAccountRegistrationRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Registers a new internal account with the provided credentials.
     * @param internalAccountRegistrationRequest  (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Interal account registration was successful. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Account with the email already exists. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returned if any error occurred during the request. </td><td>  -  </td></tr>
     </table>
     */
    public Account registerInternalAccount(InternalAccountRegistrationRequest internalAccountRegistrationRequest) throws ApiException {
        ApiResponse<Account> localVarResp = registerInternalAccountWithHttpInfo(internalAccountRegistrationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Registers a new internal account with the provided credentials.
     * @param internalAccountRegistrationRequest  (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Interal account registration was successful. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Account with the email already exists. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returned if any error occurred during the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> registerInternalAccountWithHttpInfo(InternalAccountRegistrationRequest internalAccountRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = registerInternalAccountValidateBeforeCall(internalAccountRegistrationRequest, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Registers a new internal account with the provided credentials.
     * @param internalAccountRegistrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Interal account registration was successful. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Account with the email already exists. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Returned if any error occurred during the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerInternalAccountAsync(InternalAccountRegistrationRequest internalAccountRegistrationRequest, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerInternalAccountValidateBeforeCall(internalAccountRegistrationRequest, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
