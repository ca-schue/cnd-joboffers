version: '3.8'
services:
  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./templates:/etc/nginx/templates
    networks:
      - service-network
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      career-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      frontend:
        condition: service_healthy
    environment:
      - FRONTEND_URL
      - AUTH_SERVICE_URL
      - USER_SERVICE_URL
      - CAREER_SERVICE_URL

  mongodb:
    image: mongo:4.4.6
    networks:
      - service-network
    volumes:
      - ./volumes/mongo-data:/data/db
      - ./authservice/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    environment:
      - MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT
      - ZOOKEEPER_TICK_TIME
    networks:
      - service-network
    volumes:
      - ./volumes/zookeeper/data:/var/lib/zookeeper/data
      - ./volumes/zookeeper/log:/var/lib/zookeeper/log
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s

  kafka-event:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - service-network
    hostname: kafka-event
    volumes:
      - ./volumes/kafka-broker/data:/var/lib/kafka/data
    environment:
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_ADVERTISED_HOST_NAME
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s

  eventstoredb:
    image: eventstore/eventstore:23.6.0-buster-slim
    # For ARM-based processors
    # image: eventstore/eventstore:23.6.0-alpha-arm64v8
    environment:
      - EVENTSTORE_CLUSTER_SIZE
      - EVENTSTORE_RUN_PROJECTIONS
      - EVENTSTORE_START_STANDARD_PROJECTIONS
      - EVENTSTORE_EXT_TCP_PORT
      - EVENTSTORE_HTTP_PORT
      - EVENTSTORE_INSECURE
      - EVENTSTORE_ENABLE_EXTERNAL_TCP
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP
    networks:
      - service-network
    volumes:
      - ./volumes/eventstore-volume-data:/var/lib/eventstore
      - ./volumes/eventstore-volume-logs:/var/log/eventstore

  frontend:
    build: ./frontend/.
    networks:
      - service-network
    expose:
      - "${FRONTEND_PORT}:80"
    environment:
      - EXTERNAL_AUTH_SERVICE_URL=http://localhost/auth
      - EXTERNAL_USER_SERVICE_URL=http://localhost/user
      - EXTERNAL_CAREER_SERVICE_URL=http://localhost/career
      - OIDC_PROVIDER_DISCOVERY_ENDPOINT
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET
      - OIDC_CLIENT_REDIRECT_URL
    healthcheck:
      test: "curl -sf http://localhost:${FRONTEND_PORT} || exit 1"
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s

  auth-service:
    build: ./authservice/.
    networks:
      - service-network
    depends_on:
      mongodb:
          condition: service_healthy
      kafka-event:
        condition: service_healthy
    expose:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    environment:
      - AUTH_SERVICE_PORT
      - AUTH_SERVICE_MONGODB_URI
      - KAFKA_BOOTSTRAP_SERVER
      - INTERNAL_JWT_ISSUER_URL
      - OIDC_PROVIDER_DISCOVERY_ENDPOINT
      - JWT_PUBLIC_KEY_BASE64
      - JWT_PRIVATE_KEY_BASE64
      - JWT_KEY_ID
      - JWT_VALIDITY_IN_SECONDS
      - JWT_KEY_ALGORITHM
      - JWT_SIGNING_ALGORITHM

    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s

  user-service:
    build: ./userservice/.
    networks:
      - service-network
    depends_on:
      mongodb:
        condition: service_healthy
      kafka-event:
        condition: service_healthy
      auth-service:
          condition: service_healthy
    expose:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    environment:
      - USER_SERVICE_PORT
      - INTERNAL_JWT_ISSUER_URL
      - KAFKA_BOOTSTRAP_SERVER
      - USER_SERVICE_MONGODB_URI
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s

  career-service:
    build: ./careerservice/.
    networks:
      - service-network
    depends_on:
      mongodb:
        condition: service_healthy
      kafka-event:
        condition: service_healthy
      eventstoredb:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    expose:
      - "${CAREER_SERVICE_PORT}:${CAREER_SERVICE_PORT}"
    environment:
      - CAREER_SERVICE_PORT
      - KAFKA_BOOTSTRAP_SERVER
      - EVENT_STORE_URI
      - CAREER_SERVICE_MONGODB_URI
      - INTERNAL_JWT_ISSUER_URL
      - USER_SERVICE_URL
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s


  notification-service:
    build: ./notificationservice/.
    networks:
      - service-network
    depends_on:
      mongodb:
        condition: service_healthy
      kafka-event:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVER
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 40s

networks:
  service-network:
    name: service-network
